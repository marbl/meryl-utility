# -*- makefile -*-

LIBUTL/        :=$(call MakePath,$/../libutil/)

src    := $/alphabet.c \
          $/alphabet.h \
          $/bio++.H \
          $/bio.h \
          $/chainedSequence.C \
          $/fasta-buildindex.C \
          $/fasta-c.C \
          $/fasta-c.h \
          $/fasta-cache.C \
          $/fasta-cache.H \
          $/fasta-find-id.C \
          $/fasta-find-iid.C \
          $/fasta-openindex.C \
          $/fasta-sequenceincore.C \
          $/fasta-sequenceincore.H \
          $/fasta-sequenceondisk.C \
          $/fasta-sequenceondisk.H \
          $/fasta-types.H \
          $/fasta.C \
          $/fasta.H \
          $/halign.c \
          $/mers.h \
          $/merstream.C \
          $/merstreamfile.C \
          $/reversecomplement.c

$/.C_SRCS    :=$(filter %.c,${src})
$/.CXX_SRCS  :=$(filter %.C,${src})
$/.CXX_LIBS  :=$/libbio.a

$/.CLEAN := $/*.o
$/.REAL-CLEAN :=$/buildinfo-*

#  For reasons bri doesn't know, we must explicitly include libbio.
#  It's related to things in fasta needing to include things in libbio,
#  and possibly has root cause in that when building libbio, we don't
#  use fasta/Make.include -- perhaps we should be using relative
#  includes "../libbio/bri.h" or have an include directory?
#
$(eval $/%.d $/%.o: CFLAGS+=-I${LIBUTL/})
$(eval $/%.d $/%.o: CXXFLAGS+=-I${LIBUTL/})

$/reversecomplement.c.d: $/alphabet.h
$/merstream.C.d:         $/alphabet.h

$/libbio.a: ${$/.C_SRCS:.c=.o} ${$/.CXX_SRCS:.C=.o} $/alphabet.o $/buildinfo-libbio.o

$/alphabet.c: $/alphabet.h
$/alphabet.h:  $/alphabet-generate.c
	$(CC) $(CFLAGS) $(CFLAGS_COMPILE) -o `dirname $@`/a.out -DMAIN $<
	cd `dirname $@` ; ./a.out && rm -f a.out

$/buildinfo-libbio.c: $/buildinfo-libbio.h
$/buildinfo-libbio.h: ${src}
	@${LIBUTL/}buildinfo.pl libbio "${CXXFLAGS} ${CXXFLAGS_COMPILE}" $^
	@[ `dirname $@` = "." ] || mv buildinfo-libbio.[ch] `dirname $@`

